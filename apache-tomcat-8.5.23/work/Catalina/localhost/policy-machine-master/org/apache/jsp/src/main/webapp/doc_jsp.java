/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.23
 * Generated at: 2017-11-17 21:47:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.src.main.webapp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class doc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <title>Policy Machine API</title>\n");
      out.write("    <link rel=\"stylesheet\" href=\"./css/theme.css\">\n");
      out.write("    <link rel=\"stylesheet\" href=\"./css/nav.css\">\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css?family=Open+Sans:400,700|Source+Code+Pro:300,600|Titillium+Web:400,600,700\" rel=\"stylesheet\">\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"swagger-ui.css\" >\n");
      out.write("    <style>\n");
      out.write("        html\n");
      out.write("        {\n");
      out.write("            box-sizing: border-box;\n");
      out.write("            overflow: -moz-scrollbars-vertical;\n");
      out.write("            overflow-y: scroll;\n");
      out.write("        }\n");
      out.write("        *,\n");
      out.write("        *:before,\n");
      out.write("        *:after\n");
      out.write("        {\n");
      out.write("            box-sizing: inherit;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        body {\n");
      out.write("            margin:0;\n");
      out.write("            background: lightgrey;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body style=\"padding-bottom: 10px;\">\n");
      out.write("<div class=\"header\">\n");
      out.write("    <ul>\n");
      out.write("        <li style=\"float: right; margin-right: 5px; color: white; font-size: 40px\">PolicyMachine</li>\n");
      out.write("        <li><a href=\"userguide.jsp\" class=\"\">User Guide</a></li>\n");
      out.write("        <li><a href=\"doc.jsp\" class=\"pmactive\">API Documentation</a></li>\n");
      out.write("        <li><a href=\"config.jsp\" class=\"\">Server Configuration</a></li>\n");
      out.write("    </ul>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<div class=\"card content\" style=\"margin-right: 15%; margin-left: 15%; padding: 0 25px 50px 25px\">\n");
      out.write("    <div id=\"swagger-ui\"></div>\n");
      out.write("</div>\n");
      out.write("<script src=\"swagger-ui-bundle.js\"> </script>\n");
      out.write("<script src=\"swagger-ui-standalone-preset.js\"> </script>\n");
      out.write("<script>\n");
      out.write("    window.onload = function() {\n");
      out.write("\n");
      out.write("        // Build a system\n");
      out.write("        const ui = SwaggerUIBundle({\n");
      out.write("            url: \"/swagger.json\",\n");
      out.write("            dom_id: '#swagger-ui',\n");
      out.write("            deepLinking: true,\n");
      out.write("            presets: [\n");
      out.write("                SwaggerUIBundle.presets.apis,\n");
      out.write("                SwaggerUIStandalonePreset\n");
      out.write("            ],\n");
      out.write("            plugins: [\n");
      out.write("                SwaggerUIBundle.plugins.DownloadUrl\n");
      out.write("            ],\n");
      out.write("            layout: \"StandaloneLayout\"\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        window.ui = ui\n");
      out.write("    }\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
