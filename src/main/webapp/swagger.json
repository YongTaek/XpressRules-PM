{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Policy Machine API"
  },
  "host": "localhost:8080",
  "basePath": "/pm/api/",
  "tags": [
    {
      "name": "nodes",
      "description": "Create, retrieve, edit, and delete nodes.  Get relevant information about a node including it's properties and child/parent nodes."
    },
    {
      "name": "assignments",
      "description": "Create and delete assignments, and check that an assignment exists between two nodes."
    },
    {
      "name": "access",
      "description": "Manage access to nodes."
    },
    {
      "name": "prohibitions",
      "description": "Manage prohibitions."
    }
  ],
  "schemes": [
    "http"
  ],
  "definitions": {
    "NodeType": {
      "type": "string",
      "enum": [
        "C",
        "OA",
        "UA",
        "U",
        "O",
        "PC",
        "D",
        "OS"
      ]
    },
    "Node": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 12345
        },
        "name": {
          "type": "string",
          "example": "nodeName"
        },
        "type": {
          "type": "string",
          "enum": [
            "C",
            "OA",
            "UA",
            "U",
            "O",
            "PC",
            "D",
            "OS"
          ],
          "example": "OA"
        },
        "description": {
          "type": "string",
          "example": "node description"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Property"
          }
        }
      }
    },
    "Property": {
      "properties": {
        "key": {
          "type": "string",
          "example": "location"
        },
        "value": {
          "type": "string",
          "example": "US"
        }
      }
    },
    "Prohibition": {
      "properties": {
        "subject": {
          "$ref": "#/definitions/ProhibitionSubject"
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProhibitionResource"
          }
        }
      }
    },
    "ProhibitionResource": {
      "properties": {
        "compliment": {
          "type": "boolean",
          "example": true
        },
        "resourceId": {
          "type": "integer",
          "example": 12345
        }
      }
    },
    "SubjectType": {
      "type": "string",
      "enum": [
        "U",
        "UA",
        "P"
      ]
    },
    "ProhibitionSubject": {
      "properties": {
        "subjectId": {
          "type": "integer",
          "example": 100
        },
        "subjectType": {
          "type": "string",
          "enum": [
            "U",
            "UA",
            "P"
          ],
          "example": "U"
        }
      }
    },
    "AddNodePropertyRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "example": "prop"
        },
        "value": {
          "type": "string",
          "example": "value"
        }
      }
    },
    "AddOperationsToProhibitionRequest": {
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "r",
            "w"
          ]
        }
      }
    },
    "AddResourceToProhibitionRequest": {
      "properties": {
        "compliment": {
          "type": "boolean",
          "example": true
        },
        "resourceId": {
          "type": "integer",
          "example": 12345
        }
      }
    },
    "ApiResponse": {
      "properties": {
        "code": {
          "type": "integer"
        },
        "entity": {
          "type": "object"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AssignmentRequest": {
      "properties": {
        "childId": {
          "type": "integer",
          "example": 101
        },
        "parentId": {
          "type": "integer",
          "example": 100
        }
      }
    },
    "AssociationRequest": {
      "properties": {
        "inherit": {
          "type": "boolean",
          "example": true
        },
        "ops": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "r",
            "w"
          ]
        },
        "targetId": {
          "type": "integer",
          "example": 12345
        },
        "uaId": {
          "type": "integer",
          "example": 102
        }
      }
    },
    "CreateNodeRequest": {
      "properties": {
        "name": {
          "type": "string",
          "example": "newNode"
        },
        "type": {
          "type": "string",
          "enum": [
            "C",
            "OA",
            "UA",
            "U",
            "O",
            "PC",
            "D",
            "OS"
          ],
          "example": "OA"
        },
        "description": {
          "type": "string",
          "example": "newNode description"
        }
      }
    },
    "CreateProhibitionRequest": {
      "properties": {
        "intersection": {
          "type": "boolean",
          "example": true
        },
        "name": {
          "type": "string",
          "example": "denyName"
        },
        "operations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "r"
          ]
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProhibitionResource"
          }
        },
        "subject": {
          "$ref": "#/definitions/ProhibitionSubject"
        }
      }
    },
    "PostSubjectToProhibitionRequest": {
      "properties": {
        "subjectId": {
          "type": "integer",
          "example": 12345
        },
        "subjectType": {
          "type": "string",
          "example": "U"
        }
      }
    },
    "UpdateNodeRequest": {
      "properties": {
        "description": {
          "type": "string",
          "example": "Updated description"
        },
        "name": {
          "type": "string",
          "example": "newName"
        }
      }
    },
    "AccessEntry": {
      "properties": {
        "nodeId": {
          "type": "integer",
          "example": 12345
        },
        "operations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "r",
            "w"
          ]
        }
      }
    }
  },
  "paths": {
    "/nodes": {
      "get": {
        "tags": [
          "nodes"
        ],
        "description": "Search for nodes by name, type, and/or properties.  If searching by property, the key and value must be present.  Leave all parameters null to get all nodes.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "description": "The name of the nodes to search for",
            "type": "string",
            "in": "query"
          },
          {
            "name": "type",
            "description": "The type of the nodes to search for",
            "type": "string",
            "enum": [
              "C",
              "OA",
              "UA",
              "U",
              "O",
              "PC",
              "D",
              "OS"
            ],
            "in": "query"
          },
          {
            "name": "key",
            "description": "They key of the property to search for",
            "type": "string",
            "in": "query"
          },
          {
            "name": "value",
            "description": "The value of the property to search for",
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Node objects",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Node"
              }
            }
          },
          "400": {
            "description": "InvalidNodeTypeException, InvalidPropertyException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "nodes"
        ],
        "description": "Create a new Node with the given parameters.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The request object containing the parameters for the new node",
            "schema": {
              "$ref": "#/definitions/CreateNodeRequest"
            },
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The node was created successfully",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "400": {
            "description": "NullNameException, InvalidTypeException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/nodes/{nodeId}": {
      "get": {
        "tags": [
          "nodes"
        ],
        "description": "Get a node with the given ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "nodeId",
            "in": "path",
            "required": true,
            "description": "the ID of the node to search for"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "400": {
            "description": "NodeNotFoundException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "nodes"
        ],
        "description": "Update a node's name and/or description",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "nodeId",
            "in": "path",
            "required": true,
            "description": "The ID of the node to update"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateNodeRequest"
            },
            "description": "An UpdateNodeRequest object containing the new name and description"
          }
        ],
        "responses": {
          "200": {
            "description": "The node was successfully updated",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "400": {
            "description": "NodeNotFoundException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "nodes"
        ],
        "description": "Delete a node identified by the given ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "nodeId",
            "in": "path",
            "required": true,
            "description": "the ID of the node to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "The node was successfully deleted"
          },
          "400": {
            "description": "NodeNotFoundException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/nodes/{nodeId}/children": {
      "get": {
        "tags": [
          "nodes"
        ],
        "description": "Get all of the nodes that are assigned to the node identified by the given ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "nodeId",
            "description": "The ID of the node to get the children of",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "type",
            "description": "The type of children to get. (i.e. get all of the children that are objects)",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of nodes that are assigned to the given node",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Node"
              }
            }
          },
          "400": {
            "description": "NodeNotFoundException, InvalidNodeTypeException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "nodes"
        ],
        "description": "Delete the children of a node",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "nodeId",
            "description": "The ID of the node to delete the children of",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "type",
            "description": "The type of children to delete",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The children of the node were all deleted"
          },
          "400": {
            "description": "NodeNotFoundException, InvalidNodeTypeException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/nodes/{nodeId}/parents": {
      "get": {
        "tags": [
          "nodes"
        ],
        "description": "Get the nodes that the specified node is assigned to",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "nodeId",
            "description": "The ID of the node to get the parents of",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "type",
            "description": "The type of  parents to get",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "A list of nodes that the given node is assigned to",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Node"
              }
            }
          },
          "400": {
            "description": "NodeNotFoundException, InvalidNodeTypeException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/nodes/{nodeId}/properties": {
      "get": {
        "tags": [
          "nodes"
        ],
        "description": "Get the properties of a node",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "nodeId",
            "description": "The ID of the node to get the properties for",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the node's properties",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Property"
              }
            }
          },
          "400": {
            "description": "NodeNotFoundException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "nodes"
        ],
        "description": "Add a property to the node with the given ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "nodeId",
            "description": "The ID of the node to add the property to",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "description": "The request object which contains the property key and value",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddNodePropertyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of nodes that the given node is assigned to",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "400": {
            "description": "InvalidPropertyException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/nodes/{nodeId}/properties/{key}": {
      "get": {
        "tags": [
          "nodes"
        ],
        "description": "Get the value of a property with the given key for a node",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "key",
            "description": "The key to get the value for",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "nodeId",
            "description": "The ID of the node to get the property value",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The property with the given key",
            "schema": {
              "$ref": "#/definitions/Property"
            }
          },
          "400": {
            "description": "NodeNotFoundException, PropertyNotFoundException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "nodes"
        ],
        "description": "Delete the property from the node with the given key",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "key",
            "description": "The key of the property to delete",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "nodeId",
            "description": "The ID of the node to delete the property for",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The property with the given key",
            "schema": {
              "$ref": "#/definitions/Property"
            }
          },
          "400": {
            "description": "NodeNotFoundException, PropertyNotFoundException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/assignments": {
      "get": {
        "tags": [
          "assignments"
        ],
        "description": "Return true if the assignment exists, false otherwise",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "childId",
            "description": "The ID of the child in the assignment",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "parentId",
            "description": "the ID of the Parent in the assignment",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "True if the assignment exists, false otherwise"
          },
          "400": {
            "description": "NodeNotFoundException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "assignments"
        ],
        "description": "Create a new assignment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "The request object which contains the IDs of the child and parent",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssignmentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment was successfully created"
          },
          "400": {
            "description": "NodeNotFoundException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "assignments"
        ],
        "description": "Delete the assignment between the given child ID and parent ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "childId",
            "description": "The ID of the child in the assignment",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "parentId",
            "description": "The ID of the parent in the assignment",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment was successfully deleted"
          },
          "400": {
            "description": "NodeNotFoundException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/access/resources": {
      "post": {
        "tags": [
          "access"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssociationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Access successfully granted"
          },
          "400": {
            "description": "NodeNotFoundException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/access/resources/{targetId}": {
      "get": {
        "tags": [
          "access"
        ],
        "description": "Get the permitted operations on a resource for a specified user, or if none, all users",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "targetId",
            "description": "The ID of the resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "userId",
            "description": "the ID of the user",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the operations each user has on the target node",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "NodeNotFoundException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "access"
        ],
        "description": "Update an association",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "targetId",
            "description": "The ID of the target resource",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "name": "add",
            "description": "If true, add the operations in the request to the association, otherwise remove the operations from the assocaiation.  If no Association exists, an error is returned.",
            "in": "query",
            "required": false,
            "default": true
          },
          {
            "name": "body",
            "description": "The request object containing the User Attribute ID and Target ID, as well as the operations and/or a boolean inherit value. The operations and inherit value are not required, but the User Attribute ID and the TargetId are required.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssociationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated association"
          },
          "400": {
            "description": "NodeNotFoundException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "access"
        ],
        "description": "Delete an association between a User Attribute and a target Node",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "targetId",
            "description": "The target ID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "uaId",
            "description": "The ID of the User Attribute",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Access successfully removed"
          },
          "400": {
            "description": "NodeNotFoundException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/access/resources/{targetId}/children": {
      "get": {
        "tags": [
          "access"
        ],
        "description": "Get the children of a node that are accessible for a user, and the operations which that user is permitted",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "targetId",
            "description": "The ID of the node to get the accesible children of",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "userId",
            "description": "The ID of the user",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A HashMap of nodes that are accessible to the user and the operations the user is permitted on each node",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccessEntry"
              }
            }
          },
          "400": {
            "description": "NodeNotFoundException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/access/users/{userId}/resources": {
      "get": {
        "tags": [
          "access"
        ],
        "description": "Get the nodes that are accessible by a user, and the operations that user is permitted",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "userId",
            "description": "The ID of the user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A HashMap of nodes that are accessible to the user and the operations the user is permitted on each node",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccessEntry"
              }
            }
          },
          "400": {
            "description": "NodeNotFoundException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/access/resources/{targetId}/prohibitions": {
      "get": {
        "tags": [
          "access"
        ],
        "description": "Get the operations that are prohibited on a node for a user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "targetId",
            "description": "The ID of the node to get the prohibited operations",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "userId",
            "description": "The ID of the user",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A list of operations that are prohibited for a user on a node",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "NodeNotFoundException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/prohibitions": {
      "post": {
        "tags": [
          "prohibitions"
        ],
        "description": "Create a new Prohibition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "A request object containing the name, boolean intersection value, operations, resources, and subject for a new Prohibition.  The name is the only parameter that is requred.  The others will be added to the prohibition if they are present.  The default inherit value is true.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProhibitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Prohibition was successfully created"
          },
          "400": {
            "description": "ProhibitionNameExistException, ProhibitionDoesNotExistException(When adding resources and a subject to the prohibition), NodeNotFoundException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/prohibitions/{prohibitionName}": {
      "get": {
        "tags": [
          "prohibitions"
        ],
        "description": "Get a Prohibition with the given name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "prohibitionName",
            "description": "The name of the prohibition to search for",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A prohibition object with the given name",
            "schema": {
              "$ref": "#/definitions/Prohibition"
            }
          },
          "400": {
            "description": "ProhibitionDoesNotExistException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "prohibitions"
        ],
        "description": "Delete a prohibition with the given name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "prohibitionName",
            "description": "The name of the prohibition",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Prohibition was deleted successfully"
          },
          "400": {
            "description": "ProhibitionDoesNotExistException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/prohibitions/{prohibitionName}/operations": {
      "get": {
        "tags": [
          "prohibitions"
        ],
        "description": "Get the operations for a prohibition with the given name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "prohibitionName",
            "description": "The name of the prohibition",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the operations in the prohibition",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "ProhibitionDoesNotExistException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "prohibitions"
        ],
        "description": "Add operations to the prohibition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "prohibitionName",
            "description": "The name of the prohibition",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "description": "The request object containing an array of operations to add to the prohibition",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddOperationsToProhibitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operations were successfully added to the prohibition"
          },
          "400": {
            "description": "ProhibitionDoesNotExistException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/prohibitions/{prohibitionName}/operations/{op}": {
      "delete": {
        "tags": [
          "prohibitions"
        ],
        "description": "Delete an operation from the prohibition with the given name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "op",
            "description": "The operation to delete",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "prohibitionName",
            "description": "The name of the prohibition",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successfully removed from the prohibition"
          },
          "400": {
            "description": "ProhibitionDoesNotExistException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/prohibitions/{prohibitionName}/resources": {
      "get": {
        "tags": [
          "prohibitions"
        ],
        "description": "Get the resources in a prohibition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "prohibitionName",
            "description": "The name of the prohibition",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the resources in a prohibition",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProhibitionResource"
              }
            }
          },
          "400": {
            "description": "ProhibitionDoesNotExistException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "prohibitions"
        ],
        "description": "Add a resource to the prohibition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "prohibitionName",
            "description": "The name of the prohibition",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "description": "The request object containing the resource ID and whether to take the compliment of the resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddResourceToProhibitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource was added to the prohibition"
          },
          "400": {
            "description": "ProhibitionDoesNotExistException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/prohibitions/{prohibitionName}/resources/{resourceId}": {
      "get": {
        "tags": [
          "prohibitions"
        ],
        "description": "Get the resource identified by {resourceId} in the prohibition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "prohibitionName",
            "description": "The name of the prohibition",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "resourceId",
            "description": "The ID of the resource to get",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A resource in the prohibition",
            "schema": {
              "$ref": "#/definitions/ProhibitionResource"
            }
          },
          "400": {
            "description": "ProhibitionDoesNotExistException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "prohibitions"
        ],
        "description": "Delete a resource from a prohibition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "prohibitionName",
            "description": "The name of the prohibition",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "resourceId",
            "description": "The ID of the resource to delete",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The resource was successfully removed from the prohibition"
          },
          "400": {
            "description": "ProhibitionDoesNotExistException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/prohibitions/{prohibitionName}/subject": {
      "get": {
        "tags": [
          "prohibitions"
        ],
        "description": "Get the subject of a prohibition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "prohibitionName",
            "description": "The name of the prohibition",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The subject of the prohibition",
            "schema": {
              "$ref": "#/definitions/ProhibitionSubject"
            }
          },
          "400": {
            "description": "ProhibitionDoesNotExistException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "prohibitions"
        ],
        "description": "Set the subject of the prohibition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "prohibitionName",
            "description": "The name of the prohibition",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "description": "The request object containing the ID of the new subject and the type of the new subject(user, user attribute, or process)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostSubjectToProhibitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The subject was successfully set for the prohibition"
          },
          "400": {
            "description": "ProhibitionDoesNotExistException"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  }
}